-- PostgreSQL Dump
-- Generated by ChatGPT for PostgreSQL based on the provided MySQL dump

-- Database: automated_examination

-- Table structure for table admin_cordinator
CREATE TABLE admin_cordinator (
  Admin_Cordinater_ID SERIAL PRIMARY KEY,
  Staff_ID INTEGER NOT NULL
);

-- Table structure for table ar
CREATE TABLE ar (
  AR_ID SERIAL PRIMARY KEY,
  Staff_ID INTEGER NOT NULL
);

-- Table structure for table attempt
CREATE TABLE attempt (
  Strudent_ID INTEGER NOT NULL,
  Exam_ID INTEGER NOT NULL,
  Maks INTEGER NOT NULL,
  Grade INTEGER NOT NULL,
  PRIMARY KEY (Strudent_ID, Exam_ID)
);

-- Table structure for table course
CREATE TABLE course (
  Coourse_ID SERIAL PRIMARY KEY,
  "course name" INTEGER NOT NULL,
  "Course code" INTEGER NOT NULL,
  credits INTEGER NOT NULL,
  department_ID INTEGER NOT NULL
);

-- Table structure for table course_offering
CREATE TABLE course_offering (
  Offering_ID SERIAL PRIMARY KEY,
  Semester INTEGER NOT NULL,
  Start_Date INTEGER NOT NULL,
  End_Date INTEGER NOT NULL,
  Course_ID INTEGER NOT NULL,
  Admin_Cordinate_ID INTEGER NOT NULL,
  Course_Cordinater INTEGER NOT NULL
);

-- Table structure for table course_register
CREATE TABLE course_register (
  Registration_ID SERIAL PRIMARY KEY,
  Offering_ID INTEGER NOT NULL
);

-- Table structure for table department
CREATE TABLE department (
  Department_ID SERIAL PRIMARY KEY,
  Name INTEGER NOT NULL,
  HoD INTEGER NOT NULL
);

-- Table structure for table exam
CREATE TABLE exam (
  Exam_ID SERIAL PRIMARY KEY,
  "Start_Data&Time" INTEGER NOT NULL,
  Duration INTEGER NOT NULL,
  Passing_Criteria INTEGER NOT NULL,
  Type INTEGER NOT NULL,
  Total_Maks INTEGER NOT NULL,
  Offering_ID INTEGER NOT NULL
);

-- Table structure for table lecture
CREATE TABLE lecture (
  Lecture_ID SERIAL PRIMARY KEY,
  Satff_ID INTEGER NOT NULL
);

-- Table structure for table prerequirest
CREATE TABLE prerequirest (
  Course_ID INTEGER NOT NULL,
  Req_Course_ID INTEGER NOT NULL,
  PRIMARY KEY (Course_ID, Req_Course_ID)
);

-- Table structure for table question
CREATE TABLE question (
  Q_ID SERIAL PRIMARY KEY,
  "Question" INTEGER NOT NULL,
  Maks INTEGER NOT NULL,
  Answer INTEGER NOT NULL,
  Exam_ID INTEGER NOT NULL
);

-- Table structure for table resitration
CREATE TABLE resitration (
  Registration_ID SERIAL PRIMARY KEY,
  Registration_Date INTEGER NOT NULL,
  Semester INTEGER NOT NULL,
  Time_Stamp INTEGER NOT NULL,
  Status INTEGER NOT NULL,
  AR_ID INTEGER NOT NULL,
  Student_ID INTEGER NOT NULL
);

-- Table structure for table staff
CREATE TABLE staff (
  Staff_ID SERIAL PRIMARY KEY,
  Email INTEGER NOT NULL,
  NIC INTEGER NOT NULL,
  FullName INTEGER NOT NULL,
  Phone_Number VARCHAR(55) NOT NULL,
  password INTEGER NOT NULL,
  Department_id INTEGER NOT NULL
);

-- Table structure for table stored_question
CREATE TABLE "stored question" (
  Q_ID SERIAL PRIMARY KEY,
  "Question" INTEGER NOT NULL,
  Answer INTEGER NOT NULL,
  Maks INTEGER NOT NULL,
  Type INTEGER NOT NULL,
  lecture_id INTEGER NOT NULL
);

-- Table structure for table student
CREATE TABLE student (
  Student_ID SERIAL PRIMARY KEY,
  Email VARCHAR(255) NOT NULL,
  "Full Name" VARCHAR(255) NOT NULL,
  NIC INTEGER NOT NULL,
  Nationality INTEGER NOT NULL,
  Photo_link INTEGER NOT NULL,
  Address INTEGER NOT NULL,
  Gender INTEGER NOT NULL,
  Phone_no VARCHAR(55) NOT NULL,
  Departmnet_ID INTEGER NOT NULL,
  Lecture_ID INTEGER NOT NULL
);

-- Table structure for table teach
CREATE TABLE teach (
  lecture_id INTEGER NOT NULL,
  offering_id INTEGER NOT NULL,
  PRIMARY KEY (lecture_id, offering_id)
);

-- Foreign Key Constraints
ALTER TABLE ar
  ADD CONSTRAINT ar_ibfk_1 FOREIGN KEY (Staff_ID) REFERENCES staff (Staff_ID);

ALTER TABLE attempt
  ADD CONSTRAINT attempt_ibfk_1 FOREIGN KEY (Strudent_ID) REFERENCES student (Student_ID),
  ADD CONSTRAINT attempt_ibfk_2 FOREIGN KEY (Exam_ID) REFERENCES exam (Exam_ID);

ALTER TABLE course
  ADD CONSTRAINT course_ibfk_1 FOREIGN KEY (department_ID) REFERENCES department (Department_ID);

ALTER TABLE course_offering
  ADD CONSTRAINT cordinater_side FOREIGN KEY (Admin_Cordinate_ID) REFERENCES admin_cordinator (Admin_Cordinater_ID),
  ADD CONSTRAINT course_offering_ibfk_1 FOREIGN KEY (Course_Cordinater) REFERENCES lecture (Lecture_ID),
  ADD CONSTRAINT course_side FOREIGN KEY (Course_ID) REFERENCES course (Coourse_ID);

ALTER TABLE course_register
  ADD CONSTRAINT offering_side FOREIGN KEY (Offering_ID) REFERENCES course_offering (Offering_ID),
  ADD CONSTRAINT register_side FOREIGN KEY (Registration_ID) REFERENCES resitration (Registration_ID);

ALTER TABLE department
  ADD CONSTRAINT department_ibfk_1 FOREIGN KEY (HoD) REFERENCES staff (Staff_ID);

ALTER TABLE exam
  ADD CONSTRAINT exam_ibfk_1 FOREIGN KEY (Offering_ID) REFERENCES course_offering (Offering_ID);

ALTER TABLE lecture
  ADD CONSTRAINT lecture_ibfk_1 FOREIGN KEY (Satff_ID) REFERENCES staff (Staff_ID);

ALTER TABLE prerequirest
  ADD CONSTRAINT prerequirest_ibfk_1 FOREIGN KEY (Req_Course_ID) REFERENCES course (Coourse_ID);

ALTER TABLE question
  ADD CONSTRAINT question_ibfk_1 FOREIGN KEY (Exam_ID) REFERENCES exam (Exam_ID);

ALTER TABLE resitration
  ADD CONSTRAINT resitration_ibfk_1 FOREIGN KEY (AR_ID) REFERENCES ar (AR_ID),
  ADD CONSTRAINT resitration_ibfk_2 FOREIGN KEY (Student_ID) REFERENCES student (Student_ID);

ALTER TABLE staff
  ADD CONSTRAINT staff_ibfk_1 FOREIGN KEY (Department_id) REFERENCES department (Department_ID);

ALTER TABLE "stored question"
  ADD CONSTRAINT stored_question_ibfk_1 FOREIGN KEY (lecture_id) REFERENCES lecture (Lecture_ID);

ALTER TABLE student
  ADD CONSTRAINT student_ibfk_1 FOREIGN KEY (Departmnet_ID) REFERENCES department (Department_ID),
  ADD CONSTRAINT student_ibfk_2 FOREIGN KEY (Lecture_ID) REFERENCES lecture (Lecture_ID);

ALTER TABLE teach
  ADD CONSTRAINT teach_ibfk_1 FOREIGN KEY (offering_id) REFERENCES course_offering (Offering_ID);

-- Indexes
CREATE INDEX idx_staff_id ON ar (Staff_ID);
CREATE INDEX idx_exam_id ON attempt (Exam_ID);
CREATE INDEX idx_department_id ON course (department_ID);
CREATE INDEX idx_offering_id ON course_offering (Offering_ID);
CREATE INDEX idx_course_id ON course_register (Offering_ID);
CREATE INDEX idx_hod ON department (HoD);
CREATE INDEX idx_staff ON lecture (Satff_ID);
CREATE INDEX idx_prereq_course ON prerequirest (Req_Course_ID);
CREATE INDEX idx_exam_id_question ON question (Exam_ID);
CREATE INDEX idx_student_id_registration ON resitration (Student_ID);
CREATE INDEX idx_department_staff ON staff (Department_id);
CREATE INDEX idx_lecture_id_question ON "stored question" (lecture_id);
CREATE INDEX idx_lecture_id_student ON student (Lecture_ID);
